workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - when: always

stages:
  - test
  - build
  - release
  - deploy

e2e-test-job:
  image: gradle:8-jdk21
  stage: test
  script:
    - ./gradlew test --scan
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - ${CI_PROJECT_DIR}/build/reports/tests/test/

#Sonecube Stage
# sonarqube-check:
#   stage: test
#   image: gradle:8-jdk21
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: gradle sonar
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     - main
#     - develop

# BUILD STAGE
backend-build-job:
  image: gradle:8-jdk21
  stage: build
  environment: production
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building the application..."
    - ./gradlew bootJar
    - echo "Building complete! :)"
  artifacts:
    paths:
      - build/libs/*.jar

# RELEASE STAGE
docker-deploy-job:
  image: docker:20
  stage: release
  dependencies:
    - backend-build-job
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building & Deploying Docker Image..."
    - docker logout
    - echo -n "${CI_REGISTRY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin

    - docker build --build-arg JAR_FILE=build/libs/*.jar -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend .
    - docker tag gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend:latest gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend:latest-$PIPELINE_TAG
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend:latest
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend:latest-$PIPELINE_TAG

    - echo "[*] Image Build & Deployment was executed."

#DEPLOYMENT STAGE
publish-job:
  stage: deploy
  variables:
    DOCKER_IMAGE: gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend:latest
  tags:
    - prod
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  before_script:
    - podman logout --all || true
    - echo -n "${CI_REGISTRY_PASSWORD}" | podman login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - podman-compose -p backend -f docker-compose.production.yml pull
    - podman-compose -p backend -f docker-compose.production.yml down
    - podman-compose -p backend -f docker-compose.production.yml up -d
