image: node:20 

stages:          
  - test
  - sonar
  - build
  - release
  - release-fullstack
  - deploy

.setup:npm:
  cache: # https://docs.gitlab.com/ee/ci/caching/#cache-nodejs-dependencies
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  before_script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - cd -

test-e2e:
  stage: test
  image: cypress/browsers:node-20.18.0-chrome-130.0.6723.69-1-ff-131.0.3-edge-130.0.2849.52-1
  extends:
    - ".setup:npm"
  script:
    - cd frontend
    - npx cypress install
    - echo "Running Cypress e2e tests..."
    - npm run dev &                             # Start the server in the background
    - npx cypress run --browser chrome          # Run Cypress end-to-end test
    - echo "Cypress e2e tests completed"


test-component:
  stage: test
  image: cypress/base:latest
  extends:
    - ".setup:npm"
  script:
    - cd frontend
    - npx cypress install
    - echo "Running Cypress component tests..."                       
    - npx cypress run --component
    - echo "Cypress component tests completed"


#test-integration:
 # stage: test
  #extends:
    #- .setupCypress
 # script:
   # - echo "Running integration tests..."
   # - npm run dev &                          # Start the server in the background
   # - sleep 20                               # Wait for the server to start (adjust time as needed)
   # - npm run integration-test               # Run integration test
   # - echo "Integration tests completed"


test-lint:
  stage: test
  extends:
    - ".setup:npm"
  script:
    - cd frontend
    - echo "Running linting..."
    #- pwd                                        # use for debugging
    #- ls                                         # use for debugging
    - npm run lint                                # Run ESLint for linting
    - echo "Linting completed"



#test-coverage:
#  stage: test
#  image: cypress/base:latest
#  extends:
#    - ".setup:npm"
#  script:
#    - cd frontend
#   - echo "Generating coverage report of tests..."
#   - npx babel src --out-dir src --out-file-extension .jsx
#   - npm run dev &
#   - npx nyc cypress run
#   - echo "Report generated successfully!"
# artifacts:
#   paths:
#     - frontend/coverage/
#   expire_in: 1 days




# SONAR STAGE
sonarqube-check:
  stage: sonar
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  dependencies:
   # - test-coverage
  script: 
    - cd frontend
    - sonar-scanner               # use -X for debugging
  allow_failure: true
  #only:
    #- merge_requests
    #- master
    #- main
    #- develop


# BUILD STAGE
frontend-build-job:       
  image: node:20 
  stage: build
  environment: production
  extends:
    - ".setup:npm"
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building the application..."
    - cd frontend
    - npm run build -- --mode=production
    - echo "Building complete!"
  artifacts:
    paths:
      - frontend/dist/

# BUILD STAGE
frontend-build-job-fullstack:
  image: node:20
  stage: build
  environment: production
  extends:
    - ".setup:npm"
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  allow_failure: true
  script:
    - echo "Building the application..."
    - cd frontend
    - npm run build -- --mode=fullstack
    - echo "Building complete!"
  artifacts:
    paths:
      - frontend/dist/

#RELEASE STAGE
docker-release-job:
  image: docker:20
  stage: release
  dependencies:
    - frontend-build-job
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building & Deploying Docker Image...."
    - docker logout
    - echo -n "${CI_REGISTRY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin # Authenticate against the GitLab container registry
    - cd frontend

    - docker build -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest .
    - docker tag gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest-$PIPELINE_TAG
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest-$PIPELINE_TAG

    - echo "[*] Image Build & Deployment was executed."


#RELEASE STAGE
docker-release-job-fullstack:
  image: docker:20
  stage: release
  dependencies:
    - frontend-build-job-fullstack
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  allow_failure: true
  script:
    - echo "Building & Deploying Docker Image...."
    - docker logout
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin # Authenticate against the GitLab container registry
    - cd frontend

    - docker build -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack .
    - docker tag gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack-$PIPELINE_TAG
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack-$PIPELINE_TAG

    - echo "[*] Image Build & Deployment was executed."


#DEPLOYMENT STAGE
publish-job:
  stage: deploy
  environment:
    name: production
  tags:
    - prod
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  before_script:
    - podman logout --all || true
    - echo -n "${CI_REGISTRY_PASSWORD}" | podman login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - podman-compose -f frontend/docker-compose.yml pull
    - podman-compose -f frontend/docker-compose.yml down
    - podman-compose -f frontend/docker-compose.yml up -d

